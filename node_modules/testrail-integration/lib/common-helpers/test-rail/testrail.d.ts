import { ICase, ICaseFilters, ICaseUpdate, INewTestResult, INewTestResults, INewTestRun, ITest, ITestResult, ITestRun, ICaseField, ICaseType, IConfiguration, IConfigurationGroup, IConfigurationUpdate, IMilestone, IMilestoneFilters, IMilestoneUpdate, INewMilestone, INewSection, INewSuite, IPriority, IProject, IProjectFilters, IProjectUpdate, ISection, ISectionUpdate, ISuite, ITemplate, ITestrailUser, ITestResultFilters, ITestResultsForRunFilters, ITestStatus } from "./testrail.interfaces";
export declare class TestRailClient {
    uri: String;
    base: String;
    password: string;
    projectId: number;
    username: string;
    testRunId: string;
    caseIdsMap: Map<number, boolean>;
    constructor(options: {
        password: string;
        url: string;
        username: string;
    });
    addResultsForCases(runId: number, results: INewTestResults[]): Promise<ITestResult[]>;
    addResultForCase(runId: number, caseId: number, content: INewTestResult): Promise<ITestResult>;
    getCase(caseId: number): Promise<ICase>;
    getCases(projectId: number, caseFilters: ICaseFilters): Promise<ICase[]>;
    addCase(sectionId: number, content: ICase): Promise<ICase>;
    updateCase(caseId: number, content: ICaseUpdate): Promise<ICase>;
    deleteCase(caseId: number): Promise<void>;
    deleteCases(projectId: number, suiteId: number, soft: number, caseIds: number[]): Promise<void>;
    getRun(runId: number): Promise<ITestRun>;
    getRuns(projectId: number): Promise<ITestRun[]>;
    addRun(projectId: number, content: INewTestRun): Promise<ITestRun>;
    updateRun(runId: number, content: INewTestRun): Promise<ITestRun>;
    closeRun(runId: number): Promise<ITestRun>;
    deleteRun(runId: number): Promise<void>;
    addTestResult(runid: number, caseid: number, content: INewTestResult): Promise<ITestResult>;
    updateTestCase(caseid: number, content: ICaseUpdate): Promise<ICase>;
    headers(): any;
    queryCaseFilters(filters: any): string;
    getRunId(projectId: number, runName: string): Promise<number>;
    getCaseFields(): Promise<ICaseField[]>;
    getCaseTypes(): Promise<ICaseType[]>;
    getConfigs(project_id: number): Promise<IConfigurationGroup>;
    addConfigGroup(project_id: number, content: IConfigurationUpdate): Promise<IConfigurationGroup>;
    addConfig(config_group_id: number, content: IConfigurationUpdate): Promise<IConfiguration>;
    updateConfigGroup(config_group_id: number, content: IConfigurationUpdate): Promise<IConfiguration>;
    updateConfig(config_id: number, content: IConfigurationUpdate): Promise<IConfiguration>;
    deleteConfigGroup(config_group_id: number): Promise<void>;
    deleteConfig(config_id: number): Promise<void>;
    getMilestone(milestone_id: number): Promise<IMilestone>;
    getMilestones(project_id: number, filters: IMilestoneFilters): Promise<IMilestone[]>;
    addMilestone(project_id: number, content: INewMilestone): Promise<IMilestone>;
    updateMilestone(milestone_id: number, content: IMilestoneUpdate): Promise<IMilestone>;
    deleteMilestone(milestone_id: number): Promise<void>;
    getPlan(plan_id: number): Promise<any>;
    getPlans(project_id: number, filters: any): Promise<any>;
    addPlan(project_id: number, content: any): Promise<any>;
    addPlanEntry(plan_id: number, content: any): Promise<any>;
    updatePlan(plan_id: number, content: any): Promise<any>;
    updatePlanEntry(plan_id: number, entry_id: number, content: any): Promise<any>;
    closePlan(plan_id: number): Promise<void>;
    deletePlan(plan_id: number): Promise<void>;
    deletePlanEntry(plan_id: number, entry_id: number): Promise<void>;
    getPriorities(): Promise<IPriority[]>;
    getProject(project_id: number): Promise<IProject>;
    getProjects(filters: IProjectFilters): Promise<IProject[]>;
    addProject(content: IProjectUpdate): Promise<IProject>;
    updateProject(project_id: number, content: IProjectUpdate): Promise<IProject>;
    deleteProject(project_id: number): Promise<void>;
    getResults(test_id: number, filters: ITestResultFilters): Promise<any>;
    getResultsForCase(run_id: number, case_id: number, filters: ITestResultFilters): Promise<any>;
    getResultsForRun(run_id: number, filters: ITestResultsForRunFilters): Promise<any>;
    addResult(test_id: number, content: INewTestResult): Promise<any>;
    addResults(run_id: number, content: INewTestResult[]): Promise<any>;
    getResultFields(): Promise<any>;
    getSection(section_id: number): Promise<ISection>;
    getSections(project_id: number, filters: any): Promise<ISection[]>;
    addSection(project_id: number, content: INewSection): Promise<ISection>;
    updateSection(section_id: number, content: ISectionUpdate): Promise<ISection>;
    deleteSection(section_id: number): Promise<void>;
    getStatuses(): Promise<ITestStatus[]>;
    getSuite(suite_id: number): Promise<ISuite>;
    getSuites(project_id: number): Promise<ISuite[]>;
    addSuite(project_id: number, content: INewSuite): Promise<ISuite>;
    updateSuite(suite_id: number, content: INewSuite): Promise<ISuite>;
    deleteSuite(suite_id: number): Promise<any>;
    getTemplates(project_id: number): Promise<ITemplate[]>;
    getTest(test_id: number): Promise<ITest>;
    getTests(run_id: number, filters?: {
        status_id?: number | number[];
    }): Promise<ITest[]>;
    getUser(user_id: number): Promise<ITestrailUser>;
    getUserByEmail(email: string): Promise<ITestrailUser>;
    getUsers(): Promise<ITestrailUser[]>;
}
